{"version":3,"sources":["logo.svg","components/Todos/TodoItem.js","components/Todos/Todos.js","components/Todos/AddTodoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","_this$props$todo","this","props","todo","id","title","completed","react_default","a","createElement","className","style","completedStatus","type","onChange","changeItemStatus","bind","onClick","deleteItem","Component","color","Todos","_this","TodoItems","todos","map","Todos_TodoItem","key","length","ulStyle","AddTodoItem","state","submitForm","e","preventDefault","addItem","setState","changeText","target","value","onSubmit","placeholder","aria-label","aria-describedby","App","Object","toConsumableArray","filter","max_id","parseInt","sort","pop","concat","marginTop","entryStyle","Todos_AddTodoItem","components_Todos_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7965d643.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    render() {\r\n        const {id, title, completed} = this.props.todo;\r\n\r\n        return (\r\n            <li className=\"list-group-item\" style={completed ? completedStatus : {}}>\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div className=\"col-2\">\r\n                        <input type=\"checkbox\" onChange={this.props.changeItemStatus.bind(this, id)}/>\r\n                    </div>\r\n                    <div className=\"col-8 text-left\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button className=\"btn btn-sm btn-danger\" onClick={this.props.deleteItem.bind(this, id)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst deleteBtnStyle = {\r\n    backgroundColor: '#ff0000',\r\n    color: '#fff'\r\n}\r\n\r\nconst completedStatus = {\r\n    color: '#13ff13'\r\n}\r\n\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem'\r\n\r\nclass Todos extends Component {\r\n\r\n    render() {\r\n        const TodoItems = this.props.todos.map((todo) => {\r\n            return (<TodoItem key={todo.id} todo={todo} deleteItem={this.props.deleteItem} changeItemStatus={this.props.changeItemStatus}/>)\r\n        });\r\n\r\n        const renderItems = () => {\r\n            if (this.props.todos.length > 0) {\r\n                return (\r\n                    <ul id=\"my-todo-list\" className=\"list-group\" style={ulStyle}>\r\n                        {TodoItems}\r\n                    </ul>\r\n                )\r\n            }\r\n\r\n            return (\r\n                <div>No Todo For Today</div>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {renderItems()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ulStyle = {}\r\n\r\nexport default Todos;","import React, {Component} from 'react';\r\n\r\nclass AddTodoItem extends Component {\r\n    state ={\r\n        title: ''\r\n    }\r\n\r\n    submitForm = (e) => {\r\n        e.preventDefault();\r\n        this.props.addItem(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    changeText =(e) => {\r\n        this.setState({title:e.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitForm}>\r\n                <div className=\"input-group mb-2\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Recipient's username\"\r\n                           aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\"\r\n                           value={this.state.title} onChange={this.changeText} />\r\n\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Add Item</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodoItem;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todos from \"./components/Todos/Todos\"\nimport AddTodoItem from \"./components/Todos/AddTodoItem\"\n\nclass App extends Component {\n    state = {\n        todos: [\n            {id: 1, title: 'My Task 1', completed: false},\n            {id: 2, title: 'My Task 2', completed: false},\n            {id: 3, title: 'My Task 3', completed: false},\n            {id: 4, title: 'My Task 4', completed: false},\n        ]\n    }\n\n    deleteItem = (id) => {\n        this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]})\n    };\n\n    addItem = (title) => {\n        const max_id = parseInt(this.state.todos.map(todo => {return todo.id}).sort().pop()) + 1;\n        this.setState({todos: [...this.state.todos, {id: max_id, title: title, completed: false}]})\n    }\n\n    changeItemStatus = (id) => {\n        this.setState({todos: this.state.todos.map(todo => {\n                if(todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n\n\n                return todo;\n            })})\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>My React Todo List</h1>\n                </header>\n                <section className=\"container\" style={{marginTop: '5px'}}>\n                    <div className=\"row justify-content-md-center\">\n                        <div className=\"col col-lg-6\" style={entryStyle}>\n                            <AddTodoItem addItem={this.addItem}/>\n                            <Todos todos={this.state.todos} deleteItem={this.deleteItem} changeItemStatus={this.changeItemStatus} />\n                        </div>\n                    </div>\n                </section>\n            </div>\n        );\n    }\n}\n\nconst entryStyle={\n    // width:'500px'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}